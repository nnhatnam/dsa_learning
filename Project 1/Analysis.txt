1. Task0

The code runs in the same number of lines run regardless size of texts list and calls list

Answer:
=> Time complexity is O(1)

2. Task1

According to https://wiki.python.org/moin/TimeComplexity,
we have the time complexity when adding item to set is O(1).
Call n is the length of `texts`, and m is the length of `calls`. We have the analysis below


phone_set = set()                   # O(1)

# ~ O(n)
for text in texts:                  # O(n)
    phone_set.add(text[0])              # O(1)
    phone_set.add(text[1])              # O(1)

# ~ O(m)
for call in calls:                  # O(m)
    phone_set.add(call[0])              # O(1)
    phone_set.add(call[1])              # O(1)

print("{} spent the longest time, {} seconds, on the phone during September 2016.".format(longest_time[0],
                                                                                          longest_time[1]))     # O(1)
```

Answer:
=> Time complexity is O(1 + n\*(1+1) + m\*(1+1) + 2) = O(2n + 2m + 2), simplified to O(n+m)

3. Task2

According to https://wiki.python.org/moin/TimeComplexity,
we have the time complexity when adding or set item to dictionary is O(1).
Call n is the length of `calls`. We have the analysis below

```python

# ~ O(n)
def find_longest_call(call_list):
    longest_time = [None, 0]                                        # O(1)
    time_spend = {}                                                 # O(1)
    for call in call_list:                                          # O(n)
        phone1 = call[0]                                                # O(1)
        phone2 = call[1]                                                # O(1)
        spent = int(call[3])                                            # O(1)

        time_spend[phone1] = time_spend.get(phone1, 0) + spent          # O(1)
        time_spend[phone2] = time_spend.get(phone2, 0) + spent          # O(1)

        if time_spend[phone1] > longest_time[1]:                        # O(1)
            longest_time = [phone1, time_spend[phone1]]                 # O(1)

        if time_spend[phone2] > longest_time[1]:                        # O(1)
            longest_time = [phone2, time_spend[phone2]]                 # O(1)

    return longest_time


longest_call_data = find_longest_call(calls)                        # O(n) for find_longest_call() and O(1) for assigning return value to longest_call_data

print("{} spent the longest time, {} seconds, on the phone during September 2016.".format(*longest_call_data)) # O(1)
```
Answer:
=> In this case, we call `find_longest_call` function and assign return value to variable `longest_call_data` then print out the sentence.
In `find_longest_call`function, we get the time complexity is O(n) (simplified).
Because the time complexity of assignment operator is O(1) and print function is O(1), the final time complexity is O(n) (simplified)

4. Taks3


# O(1)
def is_bangalore_call(phone_number):
    return phone_number[0:5] == "(080)"                 # O(1)

# O(1)
def is_fixed_number(phone_number):
    return phone_number[0] == "("                       # O(1)

# O(1)
def is_mobile_phone(phone_number):
    return " " in phone_number.strip()                  # O(1)

# O(1)
def parse_area_code(phone_number):
    if is_fixed_number(phone_number):                   # O(1)
        return phone_number.split(')')[0] + ')'         # O(1)
    elif is_mobile_phone(phone_number):                 # O(1)
        return phone_number[0:4]                        # O(1)
    else:
        return phone_number[0:3]                        # O(1)


called_set = set()                                      # O(1)
total_call = 0                                          # O(1)
answerer_in_bangalore = 0                               # O(1)

# ~ O(n)
for call in calls:                                      # O(n) - with n is the length of `calls`
    caller, answerer = call[0], call[1]                     # O(1)

    if is_bangalore_call(caller):                           # O(1)
        total_call += 1                                     # O(1)
        called_set.add(parse_area_code(answerer))           # O(1)
        if is_bangalore_call(answerer):                     # O(1)
            answerer_in_bangalore += 1                      # O(1)

called_list = sorted(called_set)                            # O(m log m) - with m is length of `called_set` and m <= n
print("The numbers called by people in Bangalore have codes:")
# ~ O(m)
for number in called_list:                              # O(m)
    print(number)                                       # O (1)


percent = round(100.0 * answerer_in_bangalore / total_call, 2)                                                              # O(1)
print("{} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.".format(percent))     # O(1)

Answer:
=> The time complexity is O(n + m log m + m) ~ O(n + m log m).
In worst case scenario, m = n when all caller phone numbers in calls.csv are always from bangalore and caller phone numbers are never repeat.
In other word, when len(calls) == len(called_set) == len(called_list), and the time complexity will be O(n + n log n) ~ O (n log n)

5. Task4

incoming_set = set()                                # O(1)
others_set = set()                                  # O(1)

# ~O(n)
for call in calls:                                  # O(n) - with n is the length of calls
    incoming_set.add(call[0])                           # O(1)
    others_set.add(call[1])                             # O(1)

# ~O(m)
for text in texts:                                  # O(m) - with m is the length of texts
    others_set.add(text[0])                             # O(1)
    others_set.add(text[1])                             # O(1)

telemarketers = incoming_set - others_set           # O(len(incoming_set)) (https://wiki.python.org/moin/TimeComplexity) and len(incoming_set) <= n

print("These numbers could be telemarketers: ")     # O(1)
telemarketers = sorted(telemarketers)               # O(p log p) - with p is the length of telemarketers and p <= n
# ~ O(p)
for i in telemarketers:                             # O(p)
    print(i)                                        # O(1)

=> The time complexity is O(n + m + len(incoming_set) + p log p + p) ~ O(n + m + p log p)
In worst case scenario, caller phone numbers in calls.csv are never repeat, and all caller phone are always telemarketers.
Then we have n = len(incoming_set) = p. At that point, the time complexity will be O(n + m + n log n) ~ O(m + n log n )